Metadata-Version: 2.4
Name: code-context-export
Version: 0.2.0
Summary: Export codebase context to markdown for AI prompts
Home-page: https://github.com/yourusername/code-context-export
Author: Your Name
Author-email: your.email@example.com
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Documentation
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: requires-python
Dynamic: summary

# Code Context Exporter

Export your codebase context to markdown format for use with AI prompts. This tool helps you quickly grab relevant code context and either copy it to your clipboard or save it to a file.

## Installation

```bash
pip install code-context-export
```

Or install from source:

```bash
git clone https://github.com/yourusername/code-context-export.git
cd code-context-export
pip install .
```

## Usage

### Basic usage (copies to clipboard):
```bash
ctxport
```

### Export a specific directory:
```bash
ctxport /path/to/your/project
```

### Save to a file:
```bash
ctxport -o context.md
```

### Verbose output:
```bash
ctxport -v
```

### Initialize configuration:
```bash
# Create a local config file in current directory
ctxport --init-config

# Create a global config file
ctxport --init-global-config
```

## Configuration

The tool uses a flexible configuration system that allows you to customize file extensions, language mappings, and ignore patterns.

### Configuration Files

1. **Default Configuration**: Built-in defaults
2. **Global Configuration**: User-level settings
   - `~/.config/ctxport/ctxport.json` (Linux/macOS with XDG)
   - `~/.ctxport.json` (fallback)
3. **Directory Configuration**: Project-specific settings
   - `.ctxport.json` in any parent directory

Configuration files are merged in order, with later configurations overriding earlier ones.

### Configuration Format

Configuration files use JSON format:

```json
{
  "language_map": {
    ".custom": "custom-language",
    ".myext": "mylang"
  },
  "text_extensions": [
    ".custom",
    ".myext",
    ".conf"
  ],
  "ignore_patterns": [
    "*.log",
    "temp/",
    "*.tmp"
  ]
}
```

### Configuration Options

1. **language_map**: Maps file extensions to language identifiers for syntax highlighting
   - Key: file extension (including the dot)
   - Value: language identifier for markdown code blocks

2. **text_extensions**: Set of file extensions to treat as text files
   - List of extensions (including the dot)
   - Files with these extensions will be included in the export

3. **ignore_patterns**: Patterns for files and directories to exclude
   - Supports glob patterns
   - Directory patterns should end with `/`

### Example Configurations

Create a project-specific configuration:

```bash
echo '{
  "language_map": {
    ".prisma": "prisma",
    ".graphql": "graphql"
  },
  "text_extensions": [
    ".prisma",
    ".graphql",
    ".env.example"
  ],
  "ignore_patterns": [
    "node_modules/",
    "dist/",
    "*.min.js"
  ]
}' > .ctxport.json
```

### Backward Compatibility

The tool maintains backward compatibility with the `context.ignore` file format. If a `context.ignore` file exists, its patterns will be merged with configuration ignore patterns.

## Ignore Patterns

You can exclude files and directories using ignore patterns:

1. Create a `.ctxport.json` file with ignore patterns
2. Or use a `context.ignore` file (legacy method)

Example `.ctxport.json`:
```json
{
  "ignore_patterns": [
    "node_modules/",
    "*.pyc",
    "__pycache__/",
    ".git/",
    ".venv/",
    "dist/",
    "build/"
  ]
}
```

Example `context.ignore`:
```
# Dependencies
node_modules/
vendor/

# Build outputs
dist/
build/
*.pyc
__pycache__/

# Version control
.git/
.svn/

# IDEs
.vscode/
.idea/

# OS files
.DS_Store
Thumbs.db
```

## Output Format

The tool generates markdown with:
- A header with the project name
- Each file in a section with its relative path
- Code blocks with appropriate syntax highlighting

Example output:
```markdown
# Code Context Export: my-project

## src/main.py

```python
def main():
    print("Hello, world!")

if __name__ == "__main__":
    main()
```
```

## Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

## License

This project is licensed under the MIT License - see the LICENSE file for details.
